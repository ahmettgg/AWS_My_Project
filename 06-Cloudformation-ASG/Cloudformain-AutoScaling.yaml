AWSTemplateFormatVersion: 2010-09-09
Description: |
  This CFN template create ASG and ALB with ASG Target Tracking Policy
Parameters:
  myVPC:
    Description: Choose your vpc
    Type: AWS::EC2::VPC::Id

  myKeyPair:
    Description: Choose your keypair
    Type: AWS::EC2::KeyPair::KeyName
    Default: firstkey

  myInstanceType:
    Description: Choose your ec2-type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.nano
      - t3.micro
      - t4g.micro
  myEnvParam:
    Description: Chose your env type
    Type: String
    Default: prod
    AllowedValues:
      - prod
      - test
      - staging

  mySubnets:
    Description: Choose your env type
    Type: List<AWS::EC2::Subnet::Id>

Mappings:
  regionImageMap:
    us-east-1:
      prod: ami-079db87dc4c10ac91
      test: ami-098143f68772b34f5
    us-east-2:
      prod: ami-0ee4f2271a4df2d7d
      test: ami-0dbb0f9887f1fe98f
    us-west-1:
      prod: ami-0082110c417e4726e
      test: ami-04669a22aad391419

Resources:
  myASGPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref myASG # Required
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 60.0

  myASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: asg-cfn-16

      DesiredCapacity: 1

      HealthCheckGracePeriod: 300
      HealthCheckType: ELB

      LaunchTemplate:
        LaunchTemplateId: !Ref myLt

        Version: !GetAtt myLt.DefaultVersionNumber

      MaxSize: 3 # Required

      MinSize: 1 # Required

      TargetGroupARNs:
        - !GetAtt targetGrp.TargetGroupArn

      VPCZoneIdentifier: !Ref mySubnets

  myListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions: # Required
        - TargetGroupArn: !GetAtt targetGrp.TargetGroupArn
          Type: forward
      LoadBalancerArn: !Ref myALB # Required

      Port: 80
      Protocol: HTTP

  myALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: asg-cfn-16

      SecurityGroups:
        - !Ref mySecGrp

      Subnets: !Ref mySubnets

      Type: application

  targetGrp:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3

      Name: asg-cfn-16
      Port: 80
      Protocol: HTTP

      UnhealthyThresholdCount: 2
      VpcId: !Ref myVPC

  myLt:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !FindInMap
          - regionImageMap
          - !Ref "AWS::Region"
          - !Ref myEnvParam

        InstanceType: !Ref myInstanceType

        KeyName: !Ref myKeyPair

        SecurityGroupIds:
          - !GetAtt mySecGrp.GroupId

        UserData: !Base64 |
          #!/bin/bash
          #update os
          dnf update -y
          #install apache server
          dnf install -y httpd
          # get private ip address of ec2 instance using instance metadata
          TOKEN=`curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"` \
          && PRIVATE_IP=`curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/local-ipv4`
          # get public ip address of ec2 instance using instance metadata
          TOKEN=`curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"` \
          && PUBLIC_IP=`curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/public-ipv4` 
          # get date and time of server
          DATE_TIME=`date`
          # set all permissions
          chmod -R 777 /var/www/html
          # create a custom index.html file
          echo "<html>
              <head>
              <title> Application Load Balancer</title>
              </head>
              <body>
                  <h1>Testing Application Load Balancer</h1>
                  <h2>Congratulations! You have created an instance from Launch Template</h2>
                  <h3>This web server is launched from the launch template by Ahmet via CFN</h3>
                  <p>This instance is created at <b>$DATE_TIME</b></p>
                  <p>Private IP address of this instance is <b>$PRIVATE_IP</b></p>
                  <p>Public IP address of this instance is <b>$PUBLIC_IP</b></p>
              </body>
              </html>" > /var/www/html/index.html
              # start apache server
          systemctl start httpd
          systemctl enable httpd
      LaunchTemplateName: asg-cfn-16

  mySecGrp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SSH and HTTP # Required

      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: asg-16-cfn
      VpcId: !Ref myVPC

Outputs:
  DNSofELB:
    Description: Gives DNS of ELB
    Value: !Join
      - ""
      - - "http://"
        - !GetAtt myALB.DNSName
